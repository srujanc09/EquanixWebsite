[
  {
    "id": "1760286414677",
    "name": "Generated - 10/12/2025, 12:26:54 PM",
    "description": "mac10",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:26:54.677Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760286377056",
    "name": "Generated - 10/12/2025, 12:26:16 PM",
    "description": "rsi simple trend break of structure",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:26:17.056Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760285168258",
    "name": "Generated - 10/12/2025, 12:06:08 PM",
    "description": "rsi strat",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:06:08.258Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760285154275",
    "name": "Generated - 10/12/2025, 12:05:54 PM",
    "description": "rsi strat",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:05:54.275Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760285086960",
    "name": "Generated - 10/12/2025, 12:04:46 PM",
    "description": "simple moving average",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:04:46.960Z",
    "owner": null,
    "status": "generated"
  }
]