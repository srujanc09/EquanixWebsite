[
  {
    "id": "1760822452076",
    "name": "Generated - 10/18/2025, 5:20:15 PM",
    "description": "Generate Python code only between ###CODE_START### and ###CODE_END### defining run_strategy(historical_data: pd.DataFrame) -> list that buys when price is 1% below its 10-period SMA and exits after 5 ",
    "code": "###CODE_START###\nimport pandas as pd\r\nimport numpy as np\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"\r\n    Implements a simple Moving Average Crossover trading strategy.\r\n\r\n    A 'buy' signal is generated when the short-term moving average crosses\r\n    above the long-term moving average (a \"golden cross\").\r\n    A 'sell' signal is generated when the short-term moving average crosses\r\n    below the long-term moving average (a \"death cross\").\r\n    Otherwise, the signal is 'hold'.\r\n\r\n    Args:\r\n        historical_data: A pandas DataFrame with historical market data.\r\n                         It must contain a 'close' column with the closing prices.\r\n\r\n    Returns:\r\n        A list of strings representing the trading signals ('buy', 'sell', 'hold')\r\n        for each time step in the historical data.\r\n    \"\"\"\r\n    # Define the short and long windows for the moving averages\r\n    short_window = 50\r\n    long_window = 200\r\n\r\n    # Ensure there is enough data to compute the long-term moving average\r\n    if len(historical_data) < long_window:\r\n        # Not enough data, so we hold for the entire period\r\n        return ['hold'] * len(historical_data)\r\n\r\n    # Make a copy to avoid modifying the original DataFrame\r\n    data = historical_data.copy()\r\n\r\n    # Calculate the short-term and long-term simple moving averages (SMA)\r\n    data['short_ma'] = data['close'].rolling(window=short_window, min_periods=1).mean()\r\n    data['long_ma'] = data['close'].rolling(window=long_window, min_periods=1).mean()\r\n\r\n    # Create a 'position' column.\r\n    # A value of 1 indicates that the short-term MA is above the long-term MA.\r\n    # A value of 0 indicates that the short-term MA is below or equal to the long-term MA.\r\n    data['position'] = np.where(data['short_ma'] > data['long_ma'], 1, 0)\r\n\r\n    # The trading signal is generated by the change in 'position' from the previous day.\r\n    # .diff() calculates the difference between the current element and the previous one.\r\n    # A change from 0 to 1 results in a diff of 1 (buy signal).\r\n    # A change from 1 to 0 results in a diff of -1 (sell signal).\r\n    # No change results in a diff of 0 (hold signal).\r\n    data['signal'] = data['position'].diff()\r\n\r\n    # Map the numerical signals to the required string format.\r\n    # The first signal will be NaN due to .diff(), so we fill it with 'hold'.\r\n    signal_map = {1.0: 'buy', -1.0: 'sell'}\r\n    signals = data['signal'].map(signal_map).fillna('hold').tolist()\r\n\r\n    return signals\n###CODE_END###",
    "created_at": "2025-10-18T21:20:52.076Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760822143324",
    "name": "Generated - 10/18/2025, 5:14:43 PM",
    "description": "buy dip",
    "code": "###CODE_START###\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"\r\n    Implements a Moving Average Crossover trading strategy.\r\n\r\n    A buy signal (1) is generated when the short-term moving average crosses\r\n    above the long-term moving average.\r\n\r\n    A sell signal (-1) is generated when the short-term moving average crosses\r\n    below the long-term moving average.\r\n\r\n    Otherwise, a hold signal (0) is returned.\r\n\r\n    Args:\r\n        historical_data (pd.DataFrame): A DataFrame with historical market data.\r\n                                        It must contain a 'Close' column.\r\n\r\n    Returns:\r\n        list: A list of integers representing the trading signals (1, -1, or 0).\r\n    \"\"\"\r\n    # 1. Define strategy parameters\r\n    short_window = 50\r\n    long_window = 200\r\n\r\n    # 2. Create a copy of the DataFrame to avoid modifying the original data\r\n    df = historical_data.copy()\r\n\r\n    # 3. Check if there's enough data for the strategy\r\n    if len(df) < long_window:\r\n        # Not enough data to compute the long moving average, so return all hold signals\r\n        return [0] * len(df)\r\n\r\n    # 4. Calculate short and long-term Simple Moving Averages (SMA)\r\n    # The rolling window will produce NaN for periods where there isn't enough data\r\n    df['short_mavg'] = df['Close'].rolling(window=short_window, min_periods=short_window).mean()\r\n    df['long_mavg'] = df['Close'].rolling(window=long_window, min_periods=long_window).mean()\r\n\r\n    # 5. Initialize the signal column with all zeros (hold)\r\n    df['signal'] = 0\r\n\r\n    # 6. Generate buy signals (Golden Cross)\r\n    # The signal is generated on the day the crossover occurs.\r\n    # We check if the short MA is now above the long MA, AND it wasn't on the previous day.\r\n    # The use of .shift(1) refers to the previous day's data.\r\n    buy_condition = (df['short_mavg'] > df['long_mavg']) & \\\r\n                    (df['short_mavg'].shift(1) <= df['long_mavg'].shift(1))\r\n    df.loc[buy_condition, 'signal'] = 1\r\n\r\n    # 7. Generate sell signals (Death Cross)\r\n    # We check if the short MA is now below the long MA, AND it wasn't on the previous day.\r\n    sell_condition = (df['short_mavg'] < df['long_mavg']) & \\\r\n                     (df['short_mavg'].shift(1) >= df['long_mavg'].shift(1))\r\n    df.loc[sell_condition, 'signal'] = -1\r\n\r\n    # 8. Return the signals as a list of integers\r\n    return df['signal'].astype(int).tolist()\n###CODE_END###",
    "created_at": "2025-10-18T21:15:43.324Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760821742184",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\nimport pandas as pd\r\nfrom typing import List\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> List[str]:\r\n    \"\"\"\r\n    Implements a simple moving average (SMA) crossover trading strategy.\r\n\r\n    A 'BUY' signal is generated when the short-term moving average crosses\r\n    above the long-term moving average (a \"golden cross\").\r\n\r\n    A 'SELL' signal is generated when the short-term moving average crosses\r\n    below the long-term moving average (a \"death cross\").\r\n\r\n    Otherwise, the signal is 'HOLD'.\r\n\r\n    Args:\r\n        historical_data: A pandas DataFrame with historical market data.\r\n                         It must contain a 'Close' column with the closing prices.\r\n\r\n    Returns:\r\n        A list of strings, where each string is a trading signal ('BUY', 'SELL', 'HOLD')\r\n        for the corresponding time step in the historical_data.\r\n    \"\"\"\r\n    # --- Strategy Parameters ---\r\n    short_window = 50  # Short-term moving average window\r\n    long_window = 200  # Long-term moving average window\r\n\r\n    # --- Input Validation ---\r\n    if 'Close' not in historical_data.columns:\r\n        raise ValueError(\"Input DataFrame must have a 'Close' column.\")\r\n\r\n    if len(historical_data) < long_window:\r\n        # Not enough data to compute the long moving average, so hold for the entire period.\r\n        return ['HOLD'] * len(historical_data)\r\n\r\n    # --- Signal Generation ---\r\n\r\n    # Initialize a list to store the signals, with 'HOLD' as the default\r\n    signals = ['HOLD'] * len(historical_data)\r\n\r\n    # Calculate the short and long simple moving averages.\r\n    # The initial values will be NaN, which is expected and handled by the loop range.\r\n    short_mavg = historical_data['Close'].rolling(window=short_window, min_periods=short_window).mean()\r\n    long_mavg = historical_data['Close'].rolling(window=long_window, min_periods=long_window).mean()\r\n\r\n    # Iterate through the data starting from the first point where both moving averages are available.\r\n    # This also ensures that we can look at the previous day's (i-1) values without an index error.\r\n    for i in range(long_window, len(historical_data)):\r\n        # Check for a BUY signal (golden cross)\r\n        # Condition: Short MA just crossed above Long MA\r\n        if short_mavg.iloc[i] > long_mavg.iloc[i] and short_mavg.iloc[i-1] <= long_mavg.iloc[i-1]:\r\n            signals[i] = 'BUY'\r\n\r\n        # Check for a SELL signal (death cross)\r\n        # Condition: Short MA just crossed below Long MA\r\n        elif short_mavg.iloc[i] < long_mavg.iloc[i] and short_mavg.iloc[i-1] >= long_mavg.iloc[i-1]:\r\n            signals[i] = 'SELL'\r\n\r\n        # If no crossover occurs, the signal remains 'HOLD' as initialized.\r\n\r\n    return signals\n###CODE_END###",
    "created_at": "2025-10-18T21:09:02.184Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760821397685",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\nimport pandas as pd\r\nimport numpy as np\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"\r\n    Implements a vectorized Moving Average Crossover strategy.\r\n\r\n    A 'buy' signal is generated when the short-term moving average crosses\r\n    above the long-term moving average (a \"Golden Cross\").\r\n    A 'sell' signal is generated when the short-term moving average crosses\r\n    below the long-term moving average (a \"Death Cross\").\r\n    Otherwise, the signal is 'hold'.\r\n\r\n    Args:\r\n        historical_data: A pandas DataFrame with historical market data.\r\n                         It must contain a 'Close' column.\r\n\r\n    Returns:\r\n        A list of trading signals ('buy', 'sell', 'hold') for each time period.\r\n    \"\"\"\r\n    # 1. Define strategy parameters\r\n    short_window = 50\r\n    long_window = 200\r\n\r\n    # 2. Prepare data\r\n    # Create a copy to avoid modifying the original DataFrame\r\n    df = historical_data.copy()\r\n\r\n    # Check for sufficient data for the strategy to be meaningful\r\n    if len(df) < long_window:\r\n        return ['hold'] * len(df)\r\n\r\n    # 3. Calculate technical indicators\r\n    # Calculate Short-Term Moving Average (SMA)\r\n    df['short_mavg'] = df['Close'].rolling(window=short_window, min_periods=1).mean()\r\n\r\n    # Calculate Long-Term Moving Average (LMA)\r\n    df['long_mavg'] = df['Close'].rolling(window=long_window, min_periods=1).mean()\r\n\r\n    # 4. Generate crossover signals\r\n    # To detect a crossover, we need to know the state of the MAVGs on the previous day\r\n    df['short_mavg_prev'] = df['short_mavg'].shift(1)\r\n    df['long_mavg_prev'] = df['long_mavg'].shift(1)\r\n\r\n    # Condition for a \"Golden Cross\" (buy signal)\r\n    # True when short MAVG crosses above long MAVG\r\n    buy_condition = (\r\n        (df['short_mavg'] > df['long_mavg']) &\r\n        (df['short_mavg_prev'] <= df['long_mavg_prev'])\r\n    )\r\n\r\n    # Condition for a \"Death Cross\" (sell signal)\r\n    # True when short MAVG crosses below long MAVG\r\n    sell_condition = (\r\n        (df['short_mavg'] < df['long_mavg']) &\r\n        (df['short_mavg_prev'] >= df['long_mavg_prev'])\r\n    )\r\n\r\n    # 5. Create the list of signals using the conditions\r\n    # We use np.select for an efficient, vectorized way to create signals.\r\n    # The default is 'hold'. The first evaluation of the crossovers can only happen\r\n    # after the long_window period, so initial signals will be 'hold'.\r\n    conditions = [buy_condition, sell_condition]\r\n    choices = ['buy', 'sell']\r\n    signals = np.select(conditions, choices, default='hold').tolist()\r\n    \r\n    # Ensure the initial period (before LMA is reliable) is 'hold'\r\n    # The crossover logic naturally handles this for NaNs, but this is an explicit safeguard.\r\n    for i in range(long_window):\r\n        signals[i] = 'hold'\r\n\r\n    return signals\n###CODE_END###",
    "created_at": "2025-10-18T21:03:17.685Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760821253107",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"\r\n    Implements a simple Moving Average (MA) Crossover trading strategy.\r\n\r\n    A 'buy' signal is generated when the short-term moving average crosses\r\n    above the long-term moving average.\r\n    A 'sell' signal is generated when the short-term moving average crosses\r\n    below the long-term moving average.\r\n    Otherwise, the signal is 'hold'.\r\n\r\n    Args:\r\n        historical_data: A pandas DataFrame with historical market data.\r\n                         It must contain a 'close' column with the closing prices.\r\n\r\n    Returns:\r\n        A list of strings, where each string is a trading signal\r\n        ('buy', 'sell', or 'hold') for each time step in the input data.\r\n    \"\"\"\r\n    # --- Strategy Parameters ---\r\n    short_window = 40\r\n    long_window = 100\r\n\r\n    # --- Input Validation ---\r\n    if 'close' not in historical_data.columns:\r\n        raise ValueError(\"Input DataFrame must have a 'close' column.\")\r\n\r\n    if len(historical_data) < long_window:\r\n        # Not enough data to compute the long moving average, so hold for all periods.\r\n        return ['hold'] * len(historical_data)\r\n\r\n    # --- Signal Generation ---\r\n\r\n    # 1. Create a copy to avoid modifying the original DataFrame\r\n    data = historical_data.copy()\r\n\r\n    # 2. Calculate the short-term and long-term Simple Moving Averages (SMA)\r\n    data['short_ma'] = data['close'].rolling(window=short_window, min_periods=1).mean()\r\n    data['long_ma'] = data['close'].rolling(window=long_window, min_periods=1).mean()\r\n\r\n    # 3. Initialize the signals list with 'hold' as the default action\r\n    signals = ['hold'] * len(data)\r\n\r\n    # 4. Iterate over the data to generate signals based on MA crossovers\r\n    # We start from index 1 because we need to compare with the previous period (i-1)\r\n    for i in range(1, len(data)):\r\n        # Bullish Crossover: Short MA crosses above Long MA -> BUY\r\n        if (data['short_ma'].iloc[i] > data['long_ma'].iloc[i] and\r\n                data['short_ma'].iloc[i-1] <= data['long_ma'].iloc[i-1]):\r\n            signals[i] = 'buy'\r\n\r\n        # Bearish Crossover: Short MA crosses below Long MA -> SELL\r\n        elif (data['short_ma'].iloc[i] < data['long_ma'].iloc[i] and\r\n              data['short_ma'].iloc[i-1] >= data['long_ma'].iloc[i-1]):\r\n            signals[i] = 'sell'\r\n\r\n    return signals\n###CODE_END###",
    "created_at": "2025-10-18T21:00:53.107Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760821095771",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-18T20:58:15.771Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760820396148",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-18T20:46:36.148Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760820177812",
    "name": "Generated - 10/18/2025, 4:42:52 PM",
    "description": "buy dip",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: buy dip\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-18T20:42:57.812Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760717621290",
    "name": "Generated - 10/17/2025, 12:13:35 PM",
    "description": "20MA",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: 20MA\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-17T16:13:41.290Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760388215363",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:43:35.363Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387982501",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:39:42.501Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387399109",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:29:59.109Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387361341",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:29:21.341Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387324905",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:28:44.905Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387280583",
    "name": "Generated - 10/13/2025, 4:27:57 PM",
    "description": "20MA",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: 20MA\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:28:00.583Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387175188",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:26:15.188Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760387150916",
    "name": "Generated - 10/13/2025, 4:25:47 PM",
    "description": "20MA",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: 20MA\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:25:50.916Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760386562783",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:16:02.783Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760386307874",
    "name": "Generated - 10/13/2025, 4:11:44 PM",
    "description": "20MA",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: 20MA\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:11:47.874Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760385905569",
    "name": "Generated - 10/13/2025, 4:05:02 PM",
    "description": "20MA",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: 20MA\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T20:05:05.569Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760382239651",
    "name": "Generated - 10/13/2025, 3:03:56 PM",
    "description": "20MA",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: 20MA\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T19:03:59.651Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760378459170",
    "name": "Generated - 10/13/2025, 2:00:56 PM",
    "description": "buy dip",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: buy dip\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T18:00:59.170Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760378429509",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T18:00:29.509Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760378410988",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T18:00:10.988Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760374987880",
    "name": "Generated - 10/13/2025, 1:03:07 PM",
    "description": "buy dip",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: buy dip\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T17:03:07.880Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760374968323",
    "name": "Generated - 10/13/2025, 1:02:47 PM",
    "description": "buy dip",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: buy dip\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T17:02:48.323Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760374808785",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T17:00:08.785Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760374771704",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T16:59:31.704Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760374484376",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T16:54:44.376Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760374323803",
    "name": "generate a simple buy-dip strategy",
    "description": "generate a simple buy-dip strategy",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: generate a simple buy-dip strategy\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T16:52:03.803Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760373536997",
    "name": "Generated - 10/13/2025, 12:38:56 PM",
    "description": "buy dip",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: buy dip\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T16:38:56.997Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760373527159",
    "name": "Generated - 10/13/2025, 12:38:47 PM",
    "description": "buy dip",
    "code": "###CODE_START###\n# Fallback-generated strategy\r\n# Prompt: buy dip\r\nimport pandas as pd\r\n\r\ndef run_strategy(historical_data: pd.DataFrame) -> list:\r\n    \"\"\"A simple mean-reversion strategy for demonstration.\r\n\r\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\r\n    \"\"\"\r\n    trades = []\r\n    if historical_data is None or historical_data.empty:\r\n        return trades\r\n\r\n    df = historical_data.copy()\r\n    df['MA10'] = df['close'].rolling(10).mean()\r\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\r\n\r\n    position = None\r\n    entry_idx = None\r\n\r\n    for i in range(len(df)):\r\n        row = df.iloc[i]\r\n        if position is None:\r\n            # Entry: price is 1% below MA10\r\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\r\n                position = {\r\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\r\n                    'Entry Price': float(row['close']),\r\n                    'Contracts': 1\r\n                }\r\n                entry_idx = i\r\n        else:\r\n            # Exit after 5 bars or if price crosses back above MA10\r\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\r\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\r\n                position['Exit Price'] = float(row['close'])\r\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\r\n                position['Bars'] = i - entry_idx\r\n                trades.append(position)\r\n                position = None\r\n                entry_idx = None\r\n\r\n    return trades\n###CODE_END###",
    "created_at": "2025-10-13T16:38:47.159Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760296570358",
    "name": "Generated - 10/12/2025, 3:16:10 PM",
    "description": "simple moving average and rsi",
    "code": "###CODE_START###\n# Fallback-generated strategy\n# Prompt: simple moving average and rsi\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T19:16:10.358Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760286414677",
    "name": "Generated - 10/12/2025, 12:26:54 PM",
    "description": "mac10",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:26:54.677Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760286377056",
    "name": "Generated - 10/12/2025, 12:26:16 PM",
    "description": "rsi simple trend break of structure",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:26:17.056Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760285168258",
    "name": "Generated - 10/12/2025, 12:06:08 PM",
    "description": "rsi strat",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:06:08.258Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760285154275",
    "name": "Generated - 10/12/2025, 12:05:54 PM",
    "description": "rsi strat",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:05:54.275Z",
    "owner": null,
    "status": "generated"
  },
  {
    "id": "1760285086960",
    "name": "Generated - 10/12/2025, 12:04:46 PM",
    "description": "simple moving average",
    "code": "###CODE_START###\nimport pandas as pd\n\ndef run_strategy(historical_data: pd.DataFrame) -> list:\n    \"\"\"A simple mean-reversion strategy for demonstration.\n\n    Buys when price drops below its 10-bar moving average by 1%, exits after 5 bars.\n    \"\"\"\n    trades = []\n    if historical_data is None or historical_data.empty:\n        return trades\n\n    df = historical_data.copy()\n    df['MA10'] = df['close'].rolling(10).mean()\n    df['pct_vs_ma'] = (df['close'] - df['MA10']) / df['MA10']\n\n    position = None\n    entry_idx = None\n\n    for i in range(len(df)):\n        row = df.iloc[i]\n        if position is None:\n            # Entry: price is 1% below MA10\n            if pd.notna(row['MA10']) and row['pct_vs_ma'] < -0.01:\n                position = {\n                    'Entry Date': row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name),\n                    'Entry Price': float(row['close']),\n                    'Contracts': 1\n                }\n                entry_idx = i\n        else:\n            # Exit after 5 bars or if price crosses back above MA10\n            if (i - entry_idx) >= 5 or (pd.notna(row['MA10']) and row['close'] > row['MA10']):\n                position['Exit Date'] = row.name.isoformat() if hasattr(row.name, 'isoformat') else str(row.name)\n                position['Exit Price'] = float(row['close'])\n                position['PnL'] = position['Exit Price'] - position['Entry Price']\n                position['Bars'] = i - entry_idx\n                trades.append(position)\n                position = None\n                entry_idx = None\n\n    return trades\n###CODE_END###",
    "created_at": "2025-10-12T16:04:46.960Z",
    "owner": null,
    "status": "generated"
  }
]